// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/nytro04/pet-crud/types"
	mock "github.com/stretchr/testify/mock"
)

// PetStore is an autogenerated mock type for the PetStore type
type PetStore struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *PetStore) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePet provides a mock function with given fields: _a0, _a1
func (_m *PetStore) CreatePet(_a0 context.Context, _a1 *types.Pet) (*types.Pet, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreatePet")
	}

	var r0 *types.Pet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Pet) (*types.Pet, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.Pet) *types.Pet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Pet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.Pet) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePet provides a mock function with given fields: _a0, _a1
func (_m *PetStore) DeletePet(_a0 context.Context, _a1 string) (*types.Pet, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeletePet")
	}

	var r0 *types.Pet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Pet, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Pet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Pet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPetById provides a mock function with given fields: _a0, _a1
func (_m *PetStore) GetPetById(_a0 context.Context, _a1 string) (*types.Pet, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPetById")
	}

	var r0 *types.Pet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Pet, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Pet); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Pet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPets provides a mock function with given fields: _a0
func (_m *PetStore) GetPets(_a0 context.Context) ([]*types.Pet, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetPets")
	}

	var r0 []*types.Pet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*types.Pet, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Pet); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Pet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePet provides a mock function with given fields: _a0, _a1, _a2
func (_m *PetStore) UpdatePet(_a0 context.Context, _a1 string, _a2 *types.CreatePetParams) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.CreatePetParams) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPetStore creates a new instance of PetStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func MockPetStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *PetStore {
	mock := &PetStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
